// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace xamarinDbOperationAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Session
    {
        /// <summary>
        /// Initializes a new instance of the Session class.
        /// </summary>
        public Session() { }

        /// <summary>
        /// Initializes a new instance of the Session class.
        /// </summary>
        public Session(string sessionName, string speaker, int hallId, int? sessionId = default(int?), Hall hall = default(Hall))
        {
            SessionId = sessionId;
            SessionName = sessionName;
            Speaker = speaker;
            HallId = hallId;
            Hall = hall;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SessionId")]
        public int? SessionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SessionName")]
        public string SessionName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Speaker")]
        public string Speaker { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HallId")]
        public int HallId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Hall")]
        public Hall Hall { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (SessionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SessionName");
            }
            if (Speaker == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Speaker");
            }
            if (this.Hall != null)
            {
                this.Hall.Validate();
            }
        }
    }
}
